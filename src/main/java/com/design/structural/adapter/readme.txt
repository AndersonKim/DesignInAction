适配器就是一种适配中间件.

适配器模式有两种：类适配器、对象适配器、接口适配器
前两者取决于适配行为实现的方法，前者是使用继承以及实现接口的方式，后者是通过组合的方式实现的。
类适配器与对象适配器的使用场景一致，仅仅是实现手段稍有区别，二者主要用于如下场景：

　　（1）想要使用一个已经存在的类，但是它却不符合现有的接口规范，导致无法直接去访问，
        这时创建一个适配器就能间接去访问这个类中的方法。

　　（2）我们有一个类，想将其设计为可重用的类（可被多处访问），
        我们可以创建适配器来将这个类来适配其他没有提供合适接口的类。

　　以上两个场景其实就是从两个角度来描述一类问题，那就是要访问的方法不在合适的接口里，
    一个从接口出发（被访问），一个从访问出发（主动访问）。

接口适配器使用场景：

　　（1）想要使用接口中的某个或某些方法，但是接口中有太多方法，
        我们要使用时必须实现接口并实现其中的所有方法，可以使用抽象类来实现接口，
        并不对方法进行实现（仅置空），然后我们再继承这个抽象类来通过重写想用的方法的方式来实现。这个抽象类就是适配器。

适配器模式中有三种角色：

目标接口Target：用户期望的类，可以是接口，也可以是抽象类或具体类；
需要适配的类Adaptee：当前系统中有的类；
适配器Adapter：在现有接口和目标接口之间的“适配者”

适配器模式的优点：

通过适配器模式，用户在做相似的操作时可以调用同一个接口，其内部过程对于用户是透明的，这样做更简单、更直接、更解耦；
复用了现存的类，解决了现存类和复用环境要求不一致的问题；
将目标接口和现有接口解耦，通过引入一个适配器类，而无需修改原有的代码。

适配器模式的缺点：

使用适配器模式后，如果想要改变适配对象，就需要更换适配器，而更换适配器是一个非常复杂的过程。

