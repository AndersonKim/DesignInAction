在开发中，对于一些业务逻辑的处理，
通常的做法或许就是将一些可能动态变化的业务逻辑封装起来，由于动态可变化，
所以对于后期的逻辑的变更以及业务的扩展性能就需要一种设计去管理它。
装饰者模式很好的解决了这个问题，
装饰着模式的含义：动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更为灵活。

主要的工作是将可能变化的配件抽象成一层从而实现需要的时候动态的替换。
